# -*- mode: python;  -*-
############ [name of the grammar] ####################
#
#
## [LIS Grammar rail-station-01]
## [Alessandro Mazzei, 06/05/2014]
#
# Working Hypotheses:
#
# DOLCE-lite TOP ontology
#
#Linguistic phenomena modeled: word order
#
#
#IMPORTANT: in order to have several "layers" in the dependency
#relation, you have to introduce several type-change
#



####################### Features #######################
#

feature  {
  kind<1>: dcl copula adj;
  num<5>: sing plur;
  pers<5>: non-3rd {1st 2nd} 3rd;
  ap <5 1>: non-body {sx dx neutral} body;
  PoS<1 2 3 5>   : noun verb adjc adjc+ordin adjc+qualif adve prep pron determiner conj;
  TC-TYPE<2 3 5>: tc-number tc-digit tc-0 tc-1 tc-2;
  TC-RELATION<2 3 5>: tc-noun-apposition tc-noun-apposition-bis tc-noun-apposition-denom tc-noun-rmod tc-relcl-red tc-rmod tc-rmod-loc tc-rmod-time tc-rmod-time-2 tc-adv-rmod tc-none;
  tense<E>: past present future;

  ontology:
    sem-obj
    {
    particular
        {
        endurant
            {
            physical-endurant
                {
                amount-of-matter
                feature
                physical-object
                    {
                    agentive-physical-object
                    non-agentive-physical-object
                        {
                            rail-type
                            train-prototype
                            train-company
                        }
                    }
                }
            non-physical-endurant
                {
                non-physical-object
                    {
                    mental-object
                    social-object
                        {
                        agentive-social-object
                            {
                            social-agent
                            society
                            }
                        non-agentive-social-object
                        }
                    }
                }
            arbitrary-sum
            }
        perdurant
            {
            event
                {
                achievement
                accomplishment
                }
            stative
                {
                state
                process
                }
            }
        quality
            {
            temporal-quality
                {
                temporal-location
                }
            physical-quality
                {
                number#ale
                {
                 digit#ale
                }
                spatial-location
                }
            abstract-quality
            }
        abstract
            {
            fact
            set
            region
                {
                temporal-region
                    {
                    time-interval
                    }
                physical-region
                    {
                    space-region
                    }
                }
            }
        }
    };
}


######################### Words #########################

#Punctuation (1)
#Determiner (2)

##Genitivo "di trenitalia"
def detGenitive(Stem,lf,classe,cat) {
   word Stem :Genitive_fam (classe, pred=lf) : cat ;
}
family Genitive_fam {
    entry: n [X noun tc-0] \ n [Y] \ n [Z] : X:train-prototype(* <SYN-DET+GENITIVE-ARG>Y:train-prototype <SYN-DET+GENITIVE-RESTR>Z:train-company);
};
detGenitive(suo-2826-1,possesive,train-prototype,determiner)



#Noun (3)

#Noun Class II with argument
def noun-II_arg(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem:N_II_arg (classe, pred=lf){
     Stem  : neutral cat tc-type tc-relation;
   }
}
family N_II_arg{
    entry: n<5>[X] / n<~5>[Y tc-number] : X(* <SYN-NUM-APPOSITION-DENOM> Y);
}
noun-II_arg(numero-01547-1,pre-number,feature,noun,tc-1,tc-noun-apposition)



#Noun Class II
def noun-II(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem:N_II (classe, pred=lf){
     Stem  : neutral cat tc-type tc-relation;
   }
}
family N_II{
  entry: n<5>[X] : X(*);
}
#noun-II(treno-02456-1,train,non-agentive-physical-object,noun,tc-0,)
noun-II(treno-02456-1,train,train-prototype,noun,tc-0,)

#noun-II(binario-80013-1,rail,rail-type,noun,tc-1,tc-noun-rmod)
noun-II(ora-02855-1,time-point,temporal-location,noun,tc-1,tc-rmod-time)

noun-II(minuto-01431-1,minute,temporal-location,noun,tc-0,)

noun-II(ix_3-80127-1,it,non-agentive-physical-object,noun,tc-0,)

#imprese
noun-II(trenitalia-80126-1,trainitaly,train-company,noun,tc-1,tc-0)
noun-II(ntv-xxxx-1,ntv,train-company,noun,tc-1,tc-0)

#città
#noun-II(milano-01423-1,milano,space-region,noun,tc-1,tc-rmod-loc)
noun-II(salerno-80068-1,salerno,space-region,noun,tc-1,tc-rmod-loc)
noun-II(cuneo-80048-1,cuneo,space-region,noun,tc-1,tc-rmod-loc)
noun-II(chivasso-xxxx-1,chivasso,space-region,noun,tc-1,tc-rmod-loc)
noun-II(cartello-80134-1,localita_di_arrivo,space-region,noun,tc-1,tc-rmod-loc)
noun-II(località_di_provenienza-80134-1,località_di_provenienza,space-region,noun,tc-1,tc-rmod-loc)
noun-II(località_di_arrivo-80134-1,località_di_arrivo,space-region,noun,tc-1,tc-rmod-loc)


#numeri
noun-II(zero-02617-1,zero,digit,noun,tc-digit,)
noun-II(uno-02503-1,1,digit,noun,tc-digit,)
noun-II(due-00797-1,2,digit,noun,tc-digit,)
noun-II(tre-02444-1,3,digit,noun,tc-digit,)
noun-II(quattro-01915-1,4,digit,noun,tc-digit,)
noun-II(cinque-00497-1,5,digit,noun,tc-digit,)
noun-II(6-80097-1,6,digit,noun,tc-digit,)
noun-II(7-80098-1,7,digit,noun,tc-digit,)
noun-II(8-80099-1,8,digit,noun,tc-digit,)
noun-II(9-80100-1,9,digit,noun,tc-digit,)
noun-II(10-80101-1,10,number,noun,tc-number,)
noun-II(11-80102-1,11,number,noun,tc-number,)
noun-II(12-80103-1,12,number,noun,tc-number,)
noun-II(13-80104-1,13,number,noun,tc-number,)
noun-II(14-80105-1,14,number,noun,tc-number,)
noun-II(15-80106-1,15,number,noun,tc-number,)
noun-II(16-80107-1,16,number,noun,tc-number,)
noun-II(17-80108-1,17,number,noun,tc-number,)
noun-II(18-80109-1,18,number,noun,tc-number,)
noun-II(19-80110-1,19,number,noun,tc-number,)
noun-II(20-80111-1,20,number,noun,tc-number,)
noun-II(21-80112-1,21,number,noun,tc-number,)
noun-II(22-80113-1,22,number,noun,tc-number,)
noun-II(23-80114-1,23,number,noun,tc-number,)
noun-II(24-80115-1,24,number,noun,tc-number,)
noun-II(25-80116-1,25,number,noun,tc-number,)
noun-II(26-80117-1,26,number,noun,tc-number,)
noun-II(27-80118-1,27,number,noun,tc-number,)
noun-II(28-80119-1,28,number,noun,tc-number,)
noun-II(29-80120-1,29,number,noun,tc-number,)
noun-II(30-80121-1,30,number,noun,tc-number,)



def noun-II-app(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem:N_II-app (classe, pred=lf){
     Stem  : neutral cat tc-type tc-relation;
   }
}
family N_II-app{
    entry: n<5>[tc-1 X] / adj [Y]: X(* <SYN-NOUN-APPOSITION> Y:abstract-quality);
}
noun-II-app(milano-01423-1,milano,space-region,noun,tc-1,tc-rmod-loc)



def noun-II-rail(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem:N_II_rail (classe, pred=lf){
     Stem  : neutral cat tc-type tc-relation;
   }
}
family N_II_rail{
    entry : n <2> [X tc-1 tc-noun-rmod] /* n [Z tc-1] : X:rail-type(* <SYN-NOUN-RMOD> Z:feature);
}
noun-II-rail(binario-80013-1,rail,rail-type,noun,tc-1,tc-noun-rmod)




def noun-II-late(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem:N_II_late (classe, pred=lf){
     Stem  : neutral cat tc-type tc-relation;
   }
}
family N_II_late{
    entry : s [X tc-0] /* n [Z] /* n [Y] /* adj [W] : X:achievement(* <SYN-NOUN-RMOD> Y:number ^ <SYN-NOUN-RMOD> Z:temporal-location ^ <SYN-NOUN-RMOD> W);
}
noun-II-late(ritardo-80065-1,late,achievement,noun,tc-0,)


#Adjective (4)
def adj(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem:ADJ_family (classe, pred=lf){
     Stem  : neutral cat tc-type tc-relation;
   }
}
family ADJ_family{
    entry: adj <5> [X] :X(*);
}
adj(sera-02689-1,evening,temporal-location,adjc,tc-1,)
adj(mattina-02813-1,morning,temporal-location,adjc,tc-1,)
#Categorie
adj(frecciarossa-80094-1,redarrow,non-agentive-physical-object,adjc,tc-1,tc-noun-apposition)
adj(frecciabianca-80095-1,whitearrow,non-agentive-physical-object,adjc,tc-1,tc-noun-apposition)
#adj(regionale-01953-1,regional,abstract-quality,adjc,tc-1,tc-noun-apposition)
adj(regionale-01953-1,regional,non-agentive-physical-object,adjc,tc-1,tc-noun-apposition)
adj(veloce-02529-1,fast,abstract-quality,adjc,tc-1,tc-noun-apposition)
adj(regionale_veloce-80084-1,fastregional,non-agentive-physical-object,adjc,tc-1,tc-noun-apposition)
adj(straordinario-02314-1,special,abstract-quality,adjc,tc-1,tc-rmod)

adj(previsione-02678-1,prediction,non-agentive-physical-object,adjc,tc-1,tc-rmod)
#adj(centrale-00445-1,central,abstract-quality,adjc,tc-1,tc-noun-apposition-bis)
adj(centrale-00445-1,central,abstract-quality,adjc,tc-0,tc-none)


#Verb (5)

#CLASS I
#Inransitive verbs
def verb-I-intr(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem :InTransV_I (classe, pred=lf) : cat tc-type tc-relation;
}
family InTransV_I {
  entry: s [E] \ n [X] : E:achievement(* <SYN-SUBJ>X:physical-object);
};
verb-I-intr(arrivare-80008-1,arrive,achievement,verb,,)
verb-I-intr(partire-01673-1,leave,achievement,verb,,)
verb-I-intr(andare-00110-1,togo,achievement,verb,tc-1,tc-relcl-red)
verb-I-intr(venire_provenire-80128-1,tocome,achievement,verb,tc-1,tc-relcl-red)
#modal verb
def verb-mod-1(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem :verb-mod-fam-1 (classe, pred=lf) : cat tc-type tc-relation;
}
family verb-mod-fam-1 {
    entry: s [X] \ s [Y] : X (* <SYN-VERB+MODAL-INDCOMPL> Y);
};
verb-mod-1(futuro_deve-xxxx-1,future,achievement,verb,,)

def verb-mod-2(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem :verb-mod-fam-2 (classe, pred=lf) : cat tc-type tc-relation;
}
family verb-mod-fam-2 {
    entry: s [X] \ s [X] : X (<SYN-VERB+MODAL-INDCOMPL> (P *));
};
verb-mod-2(futuro_prog-80122-1,future_prog,achievement,verb,,)


##transitive verb
def verb-I-tr(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem :TransV_I (classe, pred=lf) : cat tc-type tc-relation;
}
family TransV_I {
    entry: s [E] \ n [X] / n [Y] : E:achievement(* <SYN-SUBJ>X ^ <SYN-OBJ>Y);
};
verb-I-tr(prevedere-02677-1,predict,achievement,verb,,)


#ADV
def adverb1(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem :ADV_I (classe, pred=lf) : cat tc-type tc-relation;
}
family ADV_I {
    entry: adv [X] \ n [Y]  : X:sem-obj(* <SYN-SUBJ>Y:sem-obj);
};
adverb1(in_ritardo-80032-1,in_late,quality,adve,tc-1,tc-adv-rmod)



# def adverb2(Stem,lf,classe,cat,tc-type,tc-relation) {
#    word Stem :ADV_II (classe, pred=lf) : cat tc-type tc-relation;
# }
# family ADV_II {
#     entry: (n <5> [X] \* n /* n)  \ (n  \* n /* n )  : X:rail-type(<SYN-RMOD> *);
# };
# adverb2(al_posto_di_sostitutivo-80043-1,instead,feature,adve,tc-0,tc-none)

def adverb3(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem :ADV_III (classe, pred=lf) : cat tc-type tc-relation;
}
family ADV_III {
    #entry: adve <5> [X] :X(*);
    entry: (n  [X tc-1 tc-noun-rmod]  \* n  [Y] /* n   [Z] ) \* (n   [X tc-1 tc-noun-rmod] \* n  [Y] /* n  [Z])  : X:rail-type( <SYN-RMOD> (P *));
};
adverb3(al_posto_di_sostitutivo-80043-1,instead,feature,adve,tc-1,tc-rmod)

def conj1(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem :CONJ_I (classe, pred=lf) : cat tc-type tc-relation;
}
family CONJ_I {
    ##entry: n [X] \* n [Y] /* n [Z] : X:sem-obj(* <SYN-CONJ1> Y:sem-obj ^  <SYN-CONJ2> Z:sem-obj);
    ##entry: n [X] \* n [Y] /* n [Z] : X:non-agentive-physical-object( <SYN-CONJ1> Y:non-agentive-physical-object ^ <SYN-CONJ2> Z:non-agentive-physical-object);
    ##    entry: n <5>[X] \* n [Y] /* n  [Z] : X:rail-type(* <SYN-CONJ1> Y:rail-type ^  <SYN-CONJ2> Z:rail-type);
   entry: n <5>[X] \* n [Y]  /* n  [Z] : X:rail-type(* <SYN-CONJ1> Y:rail-type ^  <SYN-CONJ2> Z:rail-type);
};
conj1(o-02987-1,xor,rail-type,noun,tc-1,tc-noun-rmod)
#conj1(o-02987-1,xor,feature,conj,tc-0,tc-none)


def conj2(Stem,lf,classe,cat,tc-type,tc-relation) {
   word Stem :CONJ_II (classe, pred=lf) : cat tc-type tc-relation;
}
family CONJ_II {
    entry: s <1>[X] \* s [Y]  /* s  [Z] : X:achievement(* <SYN-CONJ1> Y:achievement ^  <SYN-CONJ2> Z:achievement );
};
conj2(invece-02659-1,instead2,achievement,noun,tc-0,tc-noun-rmod)

#02659-invece
#80065 ritardo_tardi
#02677-prevedere



######################### Rules #########################

rule {
  no; # remove all defaults
  app +-;
  comp +-;
#  xcomp +;

#  Typechange to account adj. E.G. "treno frecciarossa"

    #typechange: adj <5> [X tc-1] => n <~5> [X tc-1 noun tc-noun-apposition] ;

    typechange: adj <5> [X tc-1 tc-noun-apposition] => n <3> [Y noun tc-0] \* n <~3> [Y tc-0] : Y:train-prototype( <SYN-NOUN-APPOSITION> X);
    typechange: adj <5> [X:abstract-quality tc-1 tc-noun-apposition-bis] => n <3> [Y:space-region noun tc-0 tc-rmod-loc] \* n <~3> [Y:space-region tc-0 tc-rmod-loc] : Y:space-region( <SYN-NOUN-APPOSITION> X:abstract-quality);#problemi computazionali di attachment :(


    typechange: adj <5> [X tc-1 tc-rmod] => n <3> [Y noun tc-0] \* n <~3> [Y tc-0] : Y:train-prototype( <SYN-NOUN-RMOD> X);



    #typechange: adv

    typechange: adv <1> [X tc-1 tc-adv-rmod] => s <~1> [Y tc-0] \* s <~1> [Y tc-0] : Y( <SYN-VERB-RMOD> X);


#  Typechange to account apposition: used several times. E.G.  "treno-numero" (or "treno frecciarossa" ??)
    typechange: n <5> [X tc-2 TC-RELATION] => n <~5> [X tc-1 TC-RELATION] ;
    typechange: n <5> [X tc-1 TC-RELATION] => n <~5> [X tc-0 TC-RELATION] ;

    typechange: n <5> [Y tc-1 tc-noun-apposition] => n <~5> [X tc-0] \* n <2> [X tc-0] : X:train-prototype( <SYN-NOUN-APPOSITION> Y);
    typechange: n <5> [Y tc-1 tc-noun-rmod] => n <~5> [X tc-0] \* n <2> [X tc-0] : X:train-prototype( <SYN-NOUN-RMOD> Y);
    typechange: n <5> [Y tc-2 tc-noun-apposition] => n <~5> [X tc-1] \* n <2> [X tc-1] : X( <SYN-NOUN-APPOSITION> Y);
    typechange: n <5> [Y tc-2 tc-noun-apposition-denom] => n <~5> [X tc-1] \* n <2> [X tc-1] : X( <SYN-NOUN-APPOSITION-DENOM> Y);

   #Typechange to account number continuation
    typechange: n <5> [X tc-digit]  => n <~5> [X tc-number] ;
    typechange: n <5> [X tc-digit] => n <~5> [X tc-number] /* n <~5> [Y tc-number] : X:number( <SYN-NOUN-CONTIN-DENOM> Y:number);

    #typechange: n <5> [X tc-number] => n  [X] /* n  [Y] : X:number( <SYN-DET> Y:temporal-location); #A2 15 minuti

   #Typechange to account for rel-cl-red ## TOD: modify this to improve performance
    typechange: s [E tc-1 tc-relcl-red] \ n [X]  => n [X tc-0]  \ n [X tc-0]: X (<SYN-VERB-RMOD+RELCL-REDUC>E:achievement);



    #Typechange to account for rmod-loc
    ##Use this with Bx>
    typechange: n [X tc-1 tc-rmod-loc] => (s [E] \ n [Y]) /* (s [E] \ n [Y]) : E:achievement(<SYN-RMOD-LOC> X:space-region);

    #Typechange to account for rmod-time
    typechange: n [X tc-1 tc-rmod-time] =>  n [X tc-rmod-time-2] /* adj [W tc-1]  /* n [Y tc-number] /* n [Z tc-number] : X ( <NOUN-APPOSITION-DENOM_MM> Y ^  <NOUN-APPOSITION-DENOM_HH> Z ^ <ADJ-RMOD> W);
    typechange: n [X tc-1 tc-rmod-time-2] =>  n [Y tc-0] \* n [Y tc-0] : Y:train-prototype ( <SYN-RMOD-TIME> X);

    #Typechange to account for "LATE"
    #typechange: n [X] =>  s [X] : X:achievement ();
}


####################### Testbed #########################
#
## use just one testbed per grammar
## here's a sample testbed -- the number after the sentence
## is the expected number of parses
#

testbed {

"treno-02456-1 regionale-01953-1" : 1;

"treno-02456-1 regionale_veloce-80084-1" : 1;

"treno-02456-1 regionale-01953-1" : 1;

"treno-02456-1 frecciarossa-80094-1 numero-01547-1 18-80109-1" : 1;

"treno-02456-1 regionale_veloce-80084-1 numero-01547-1 18-80109-1" : 1;

"treno-02456-1 frecciarossa-80094-1 numero-01547-1 18-80109-1" : 1;


"treno-02456-1 arrivare-80008-1" : 1;

#"treno-02456-1 numero-01547-1 18-80109-1 arrivare-80008-1" : 1;

#"treno-02456-1 numero-01547-1 19-80110-1 arrivare-80008-1" : 1;

#"treno-02456-1 numero-01547-1 20-80111-1 arrivare-80008-1" : 1;

#"treno-02456-1 numero-01547-1 21-80112-1 arrivare-80008-1" : 1;

#"treno-02456-1 numero-01547-1 22-80113-1 arrivare-80008-1" : 1;

"treno-02456-1 frecciarossa-80094-1 numero-01547-1 18-80109-1 arrivare-80008-1" : 1;

"treno-02456-1 frecciarossa-80094-1 numero-01547-1 19-80110-1 arrivare-80008-1" : 1;

"treno-02456-1 frecciarossa-80094-1 numero-01547-1 20-80111-1 arrivare-80008-1" : 1;

"treno-02456-1 frecciarossa-80094-1 numero-01547-1 21-80112-1 arrivare-80008-1" : 1;

"treno-02456-1 frecciarossa-80094-1 numero-01547-1 22-80113-1 arrivare-80008-1" : 1;

"treno-02456-1 regionale_veloce-80084-1 numero-01547-1 18-80109-1 arrivare-80008-1" : 1;

"treno-02456-1 regionale_veloce-80084-1 numero-01547-1 19-80110-1 arrivare-80008-1" : 1;

"treno-02456-1 regionale_veloce-80084-1 numero-01547-1 20-80111-1 arrivare-80008-1" : 1;

"treno-02456-1 regionale_veloce-80084-1 numero-01547-1 21-80112-1 arrivare-80008-1" : 1;

"treno-02456-1 regionale_veloce-80084-1 numero-01547-1 22-80113-1 arrivare-80008-1" : 1;



#"treno-02456-1 frecciarossa-80094-1 numero-01547-1 due-00797-1 zero-02617-1 tre-02444-1 due-00797-1 18-80109-1 ora-02855-1 zero-02617-1 uno-02503-1 zero-02617-1 mattina-02813-1  milano-01423-1 centrale-00445-1 venire_provenire-80128-1 binario-80013-1 numero-01547-1  trenitalia-80126-1 suo-2826-1 arrivare-80008-1 futuro_prog-80122-1" : 1;

#"treno-02456-1 straordinario-02314-1 frecciarossa-80094-1 numero-01547-1 due-00797-1 zero-02617-1 tre-02444-1 due-00797-1 trenitalia-80126-1 suo-2826-1 ora-02855-1 zero-02617-1 uno-02503-1 zero-02617-1 mattina-02813-1  milano-01423-1 centrale-00445-1 venire_provenire-80128-1 binario-80013-1 numero-01547-1 18-80109-1 arrivare-80008-1 futuro_prog-80122-1" : 1;

"treno-02456-1 frecciarossa-80094-1 numero-01547-1 due-00797-1 zero-02617-1 tre-02444-1 due-00797-1 trenitalia-80126-1 suo-2826-1 ora-02855-1 zero-02617-1 uno-02503-1 zero-02617-1 mattina-02813-1  milano-01423-1 centrale-00445-1 venire_provenire-80128-1 binario-80013-1 numero-01547-1 18-80109-1 arrivare-80008-1 futuro_prog-80122-1" : 1;

"treno-02456-1 regionale_veloce-80084-1 numero-01547-1 uno-02503-1 zero-02617-1 due-00797-1 due-00797-1 uno-02503-1 cuneo-80048-1 andare-00110-1 binario-80013-1 numero-01547-1 cinque-00497-1 partire-01673-1 futuro_prog-80122-1" : 1;

"treno-02456-1 regionale_veloce-80084-1 numero-01547-1 uno-02503-1 zero-02617-1 due-00797-1 due-00797-1 uno-02503-1 ora-02855-1 11-80102-1 due-00797-1 cinque-00497-1 sera-02689-1 cuneo-80048-1 venire_provenire-80128-1 binario-80013-1 numero-01547-1 cinque-00497-1 arrivare-80008-1 futuro_prog-80122-1" : 1;

"treno-02456-1 regionale_veloce-80084-1 numero-01547-1 uno-02503-1 zero-02617-1 due-00797-1 due-00797-1 uno-02503-1 ora-02855-1 11-80102-1 due-00797-1 cinque-00497-1 sera-02689-1 cuneo-80048-1 andare-00110-1 binario-80013-1 numero-01547-1 cinque-00497-1 partire-01673-1 futuro_prog-80122-1 " : 1;

"treno-02456-1 regionale-01953-1 numero-01547-1 quattro-01915-1 due-00797-1 quattro-01915-1 6-80097-1 ora-02855-1 11-80102-1 tre-02444-1 due-00797-1 sera-02689-1 cartello-80134-1 venire_provenire-80128-1 binario-80013-1 numero-01547-1 tre-02444-1 o-02987-1 al_posto_di_sostitutivo-80043-1 binario-80013-1 numero-01547-1 14-80105-1 arrivare-80008-1 futuro_prog-80122-1" : 1;

"treno-02456-1 regionale-01953-1 numero-01547-1 quattro-01915-1 due-00797-1 quattro-01915-1 6-80097-1 ora-02855-1 11-80102-1 tre-02444-1 due-00797-1 sera-02689-1 cartello-80134-1 venire_provenire-80128-1 arrivare-80008-1 futuro_prog-80122-1 invece-02659-1 ritardo-80065-1 previsione-02678-1 28-80119-1 minuto-01431-1" : 1;

"treno-02456-1 regionale-01953-1 numero-01547-1 quattro-01915-1 due-00797-1 quattro-01915-1 6-80097-1 ora-02855-1 11-80102-1 tre-02444-1 due-00797-1 sera-02689-1 milano-01423-1 centrale-00445-1 venire_provenire-80128-1 arrivare-80008-1 futuro_prog-80122-1 invece-02659-1 ritardo-80065-1 previsione-02678-1 28-80119-1 minuto-01431-1" : 1;}
